// This file was auto-generated by Fern from our API Definition.

package webassess

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/Method-Security/webassess/generated/go/core"
)

type UrlAssessment struct {
	CodeSummary              string `json:"codeSummary" url:"codeSummary"`
	PotentialVulnerabilities bool   `json:"potentialVulnerabilities" url:"potentialVulnerabilities"`
	VulnerabilitiesSummary   string `json:"vulnerabilitiesSummary" url:"vulnerabilitiesSummary"`
	PotentialSensitiveData   bool   `json:"potentialSensitiveData" url:"potentialSensitiveData"`
	SensitiveDataSummary     string `json:"sensitiveDataSummary" url:"sensitiveDataSummary"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UrlAssessment) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UrlAssessment) UnmarshalJSON(data []byte) error {
	type unmarshaler UrlAssessment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UrlAssessment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UrlAssessment) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UrlReport struct {
	Target string   `json:"target" url:"target"`
	Output string   `json:"output" url:"output"`
	Errors []string `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UrlReport) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UrlReport) UnmarshalJSON(data []byte) error {
	type unmarshaler UrlReport
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UrlReport(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UrlReport) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
